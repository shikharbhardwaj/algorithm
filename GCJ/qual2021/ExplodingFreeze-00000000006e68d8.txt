#include <bits/stdc++.h>
#define int long long
using pii=std::pair<int,int>;
using namespace std;

int t, n, q;

int query(int x1, int x2, int x3)
{
    cout << x1 << " " << x2 << " " << x3 << endl;
    int resp;
    cin >> resp;
    assert(resp != -1);
    return resp;
}

int check(int x, int insval, vector<int>& vals)
{
    int eff = x;
    if(x == -1)
        eff = 0;
    else if(x + 1 == vals.size())
        eff = vals.size() - 2;
    int res = query(vals[x], vals[x + 1], insval);
    if(x == eff)
    {
        if(res == vals[x])
            return -1;
        if(res == vals[x + 1])
            return 1;
        return 0;
    }
    else if(x == -1)
    {
        assert(res != -1);
        if(res == vals[0])
            return 0;
        return 1;
    }
    else
    {
        assert(eff + 2 == vals.size());
        assert(res != 1);
        if(res == vals.back())
            return 0;
        return -1;
    }
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin >> t >> n >> q;
    for(int cases = 0; cases < t; cases++)
    {
        vector<int> vals = {1, 2, 3};
        int fi = query(1, 2, 3);
        vals.erase(find(vals.begin(), vals.end(), fi));
        vals.insert(vals.begin() + 1, fi);
        for(int i = 4; i <= n; i++)
        {
            int lo = -1, hi = vals.size() - 1, mid;
            while (lo < hi)
            {
                mid = (lo + hi) / 2;
                int res = check(mid, i, vals);
                if(res == 0)
                    lo = hi = mid;
                else if(res == 1)
                    lo = mid + 1;
                else 
                    hi = mid - 1;
            }
            assert(lo == hi);
            if(lo == -1)
                vals.insert(vals.begin(), i);
            else if(lo + 1 == vals.size())
                vals.insert(vals.end(), i);
            else
                vals.insert(vals.begin() + lo + 1, i);
        }
        assert(vals.size() == n);
        for(int i = 0; i < vals.size(); i++)
            cout << vals[i] << " \n"[i + 1 == vals.size()];
        int resp;
        cin >> resp;
        assert(resp == 1);
    }
    return 0;
}